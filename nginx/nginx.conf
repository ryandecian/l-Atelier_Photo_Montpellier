# ✨ Active les événements de gestion de connexions
events {}

# 🌐 Configuration principale du serveur HTTP
http {
  # 📦 Charge les types MIME standards (pour que Nginx comprenne .js, .css, etc.)
  include       mime.types;
  default_type  application/octet-stream;

  # ⚙️ Active l'envoi efficace de fichiers
  sendfile        on;

  # 🔁 Garde les connexions HTTP ouvertes 65s pour les optimiser
  keepalive_timeout  65;

  # 🌐 Déclare les serveurs internes vers lesquels Nginx reverse proxy
  upstream frontend {
    server client:80;
  }

  upstream backend {
    server server:8080;
  }

  # ---------------------------------------------
  # 🌐 1. Compression GZIP pour tous les fichiers textes
  # ---------------------------------------------
  gzip on;  # ✅ Active la compression
  gzip_types
    text/plain
    text/css
    text/javascript
    application/javascript
    application/json
    application/xml
    application/xml+rss
    image/svg+xml;  # ⚠️ Vite produit souvent des SVG
  gzip_min_length 256;  # Ne compresse que si > 256 octets
  gzip_vary on;         # Ajoute l'en-tête Vary pour le cache/CDN
  gzip_proxied any;     # Autorise compression même derrière un proxy
  gzip_comp_level 6;    # Bon compromis entre perf & compression

  # ---------------------------------------------
  # 🧠 2. Cache côté client pour les fichiers statiques (HTML, JS, CSS, etc.)
  # ---------------------------------------------
  # On les sert avec un cache longue durée, sauf l'index.html (voir plus bas)
  map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/javascript     max;
    application/json           max;
    image/svg+xml              max;
    font/woff2                 max;
  }

  # ---------------------------------------------
  # 🌍 3. Redirection HTTP → HTTPS pour le FRONTEND
  # ---------------------------------------------
  server {
    listen 80;
    server_name atelier-photo-montpellier.fr www.atelier-photo-montpellier.fr;

    # 🔐 Autorise Let's Encrypt à accéder au challenge
    location /.well-known/acme-challenge/ {
      root /usr/share/nginx/html;
    }

    # 🔁 Redirige tout en HTTPS
    return 301 https://$host$request_uri;
  }

  # Redirection HTTP pour l'API aussi
  server {
    listen 80;
    server_name api.atelier-photo-montpellier.fr;

    location /.well-known/acme-challenge/ {
      root /usr/share/nginx/html;
    }

    return 301 https://$host$request_uri;
  }

  # ---------------------------------------------
  # 🌐 4. HTTPS - FRONTEND (React build)
  # ---------------------------------------------
  server {
    listen 443 ssl;  # ✅ Active SSL
    http2 on;  # 🔁 Active HTTP/2
    server_name atelier-photo-montpellier.fr www.atelier-photo-montpellier.fr;

    ssl_certificate /etc/letsencrypt/live/atelier-photo-montpellier.fr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/atelier-photo-montpellier.fr/privkey.pem;

    # 🗂️ Sert les fichiers du build React
    location / {
      root /usr/share/nginx/html/lapm;
      index index.html;

      # ✅ Sert index.html même si un chemin est inconnu (React SPA)
      try_files $uri /index.html;

      # 🧠 Active le cache (sauf sur index.html qui change souvent)
      expires $expires;
      add_header Cache-Control "public";
    }

    # 📡 Proxy vers l'API backend
    location /api/ {
      proxy_pass http://backend/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }
  }

  # ---------------------------------------------
  # 🌐 5. HTTPS - BACKEND API
  # ---------------------------------------------
  server {
    listen 443 ssl http2;
    server_name api.atelier-photo-montpellier.fr;

    ssl_certificate /etc/letsencrypt/live/api.atelier-photo-montpellier.fr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/api.atelier-photo-montpellier.fr/privkey.pem;

    # 📡 Route vers le serveur backend
    location / {
      proxy_pass http://backend/;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
    }

    # 🔐 Autorise Let’s Encrypt à écrire ses fichiers
    location /.well-known/acme-challenge/ {
      root /usr/share/nginx/html;
    }
  }
}
